
@{
    Layout = "./_Layout.cshtml";

    string userJson = HttpContextAccessor.HttpContext.Request.Cookies["User"] ??                    
                      HttpContextAccessor.HttpContext?.Session?.GetString("User");
    UserDTO? student = !string.IsNullOrEmpty(userJson) ? JsonConvert.DeserializeObject<UserDTO>(userJson) : null;

}
@model EduCore.Web.Pages.Student.Lecture.DetailModel
<!DOCTYPE html>

<html>

<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
</head>

<body>
    <div class="row container-fluid col-md-12 mt-5  ">
        <h6>
            <span><a href="~/Student"><i class="bi bi-house"></i></a> </span>
            <span><a href="~/Student/Course/List">Course</a></span>
            <span> <a href="~/Student/Course/Detail?cId=@Model.CourseId">@Model.CourseTitle </a>></span>
            <span>@Model.Lecture.Title</span>
        </h6>
        <div class="col-md-7 ">
            @RenderBody()

        </div>
        <div class="col-md-5 " style="max-height: 600px; overflow-y: auto;overflow-x:hidden">

            <nav>
                <div class="nav nav-tabs mb-3">
                    <button class="nav-link @(Model.AddedComment==null && Model.RepliedComment==null ?"active": "" ) border-white border-bottom-0" type="button" role="tab"
                            id="nav-about-tab" data-bs-toggle="tab" data-bs-target="#section_list" aria-controls="nav-about"
                            aria-selected="@(Model.AddedComment==null && Model.RepliedComment==null ? "true" : "false")">
                        Content
                    </button>

                    <button class="nav-link border-white border-bottom-0" type="button" role="tab" id="nav-exercise-tab"
                            data-bs-toggle="tab" data-bs-target="#excercises" aria-selected="false"
                            aria-controls="excercises">
                        Exercise
                    </button>

                    <button class="nav-link @(Model.AddedComment!=null || Model.RepliedComment!=null ? "active" : "") border-white border-bottom-0" type="button" role="tab"
                            id="nav-comment-tab" data-bs-toggle="tab" data-bs-target="#comment"
                            aria-selected="@(Model.AddedComment!=null || Model.RepliedComment!=null ?  "true" : "false")"
                            aria-controls="comment">
                        Comment
                    </button>
                </div>

            </nav>

            <div class="tab-content">
                <div class="tab-pane fade @(Model.AddedComment==null && Model.RepliedComment==null ? "show active" : "")"
                     id="section_list" role="tabpanel"
                     aria-labelledby="nav-about-tab">
                    <div class="card card-body">

                        @{
                            var sectionList = Model.CourseDetail.Sections;
                            for (int s = 0; s < sectionList.Count; s++)
                            {
                                var sectionId = $"section{s}";

                                <button class="btn btn-lg font-weight-bold border p-2 shadow-sm rounded-sm  w-100 d-flex align-content-start px-2"
                                        type="button" data-bs-toggle="collapse" data-bs-target="#@sectionId"
                                        aria-expanded="@(s==0?true:false)" aria-controls="@sectionId"
                                        style="background-color: #f5f5f5;">

                                    @sectionList[s].Title
                                    <span>@sectionList[s].Lectures.Count lectures</span>
                                    <span>@sectionList[s].Duration</span>
                                    <i class="bi bi-chevron-bar-expand"></i>
                                    <p>
                                        @if (sectionList[s].IsCompleted)
                                        {
                                            <i class="bi bi-check-circle-fill" style="color: green;"></i>
                                            <span style="color: green; font-weight: bold;">Completed</span>
                                        }
                                        else
                                        {
                                            <i class="bi bi-circle-fill" style="color: red;"></i>
                                            <span style="color: red; font-weight: bold;">In progress</span>
                                        }
                                    </p>

                                </button>

                                <ul class="list-group list-lecture collapse show" id="@sectionId">
                                    @foreach (var lecture in sectionList[s].Lectures)
                                    {
                                        <a href="/Student/Lecture/Detail?courseId=@Model.CourseId&lectureId=@lecture.LectureId">

                                        <li class="list-group-item shadow-sm list-group-item-action row m-0">
                                            <label class="tick d-flex align-items-start text-muted mx-4 @(lecture.LectureId==Model.Lecture.LectureId ? "btn btn-outline-secondary" :"") ">
                                                <b>@lecture.Title</b>
                                                <span>@lecture.Duration</span>
                                            </label>
                                                @if (lecture.IsCompleted)
                                                {
                                                <i class="bi bi-check-circle-fill" style="color: green;"></i>
                                                <span style="color: green; font-weight: bold;">Completed</span>
                                                }
                                                else
                                                {
                                                <i class="bi bi-circle-fill" style="color: red;"></i>
                                                <span style="color: red; font-weight: bold;">In progress</span>
                                                }
                                        </li>
                                        </a>
                                    }
                                </ul>
                            }
                        }
                    </div>
                </div>

                <div class="collapse" id="excercises">

                    @for (int e = 0; e < Model.Lecture.Exercises.Count; e++)
                    {
                        var exercise = Model.Lecture.Exercises[e];
                        <div class="card card-body my-5 border-3 " style="background:#f5f5f5">
                            <h7 class="text-muted">
                                <b>Ex@(e + 1): @exercise.Type </b>
                                <span>(@(exercise.Description))</span>
                            </h7>

                            @for (int q = 0; q < exercise.Questions.Count; q++)
                            {
                                var question = exercise.Questions[q];
                                <p><strong>Question @(q + 1):</strong> @question.Text</p>


                                @for (int a = 0; a < question.Answers.Count; a++)
                                {
                                    var answer = question.Answers[a];
                                    <div class="form-check  " id="form_check_answer_@(answer.AnswerId)">
                                        @if (!exercise.Type.Equals("essay"))
                                        {
                                            <input class="form-check-input multiple-choice answer-multiple-question@(question.QuestionId)"
                                                   type="radio"
                                                   name="question_@(question.QuestionId)"
                                                   id="answer_@answer.AnswerId"
                                                   value="@answer.AnswerId"
                                                   data-correct="@answer.IsCorrect" />

                                        }
                                        else
                                        {
                                            <textarea class="form-control essay answer-essay-question@(question.QuestionId)"
                                                      id="answer_@answer.AnswerId"
                                                      data-question-id="@question.QuestionId"
                                                      data-question-text="@question.Text"
                                                      rows="4"
                                                      placeholder="Write your answer here..."></textarea>
                                        }

                                        <label class="form-check-label" for="answer_@answer.AnswerId">
                                            @answer.Text
                                        </label>
                                    </div>
                                }

                            }
                        </div>
                        <button data-exercise-id="@exercise.ExerciseId"
                                data-exercise-type="@(exercise.Type)"
                                class="check-answer"
                                type="button">
                            Check answer
                        </button>
                        <h5 id="notify-result-@(exercise.Type)" style="color:red"></h5>


                    }


                </div>

                <div class="collapse @(Model.AddedComment!=null || Model.RepliedComment!=null ? "show active" : "")"
                     id="comment">

                    @if (Model.RepliedComment == null)
                    {
                        <section class="gradient-custom @(Model.RepliedComment==null ? "":"d-none") id="view_comment">
                            <div class="container my-5 ">
                                <div class="row d-flex  flex-start text-muted" style="background:#f5f5f5">



                                    @await Html.PartialAsync("../../Partials/Student/_CommentList.cshtml")







                                </div>
                                <div class="row d-flex  flex-start text-muted" style="background:#f5f5f5">
                                   
                                    @await Html.PartialAsync("../../Partials/Student/_AddComment.cshtml")

                                </div>
                            </div>
                        </section>

                    }
                    else
                    {
                        <section class="gradient-custom" id="send_comment">
                            <div class="container my-5 py-5">
                                <div class="row d-flex justify-content-center">
                                    <div class="col-md-12 col-lg-10 col-xl-8">
                                        <div class="card">
                                            <div class="card-body">
                                                <div class="d-flex flex-start align-items-center">
                                                    <img class="rounded-circle shadow-1-strong me-3"
                                                         src="@Model.RepliedComment.UserImg"
                                                         alt="avatar" width="60" height="60" />
                                                    <div>
                                                        <h6 class="fw-bold text-primary mb-1">@Model.RepliedComment.UserName</h6>
                                                        <p class="text-muted small mb-0">
                                                            Shared publicly -@Model.RepliedComment.CommentOn.ToString("dd:MM:yyyy")
                                                        </p>
                                                    </div>
                                                </div>
                                                <p class="mt-3 mb-4 pb-2">
                                                    @Model.RepliedComment.Content
                                                </p>
                                            </div>
                                            @await Html.PartialAsync("../../Partials/Student/_AddComment.cshtml")


                                        </div>
                                    </div>
                                </div>
                            </div>
                        </section>

                    }

                </div>



            </div>

        </div>
    </div>


    @Html.AntiForgeryToken()









    @section Scripts {

        <script>
            $(document).ready(() => {


                $('.like-comment').click(function (e) {
                    e.preventDefault();
                    var commentId = $(this).attr('data-comment-id');
                    var likeCountElement = $('#likeCount_' + commentId);
                    var currentLikes = parseInt(likeCountElement.text());

                    likeCountElement.text(currentLikes + 1);
                });
                // $(".reply-comment").click(function () {
                //     $("#view_comment").hide();
                //     $("#send_comment").show();
                // });


                $("#btn_cancel_comment").click(function () {

                    $('#AddedComment_Content').val('');
                    $('#fileInput').val('');
                    $("#view_comment").show();
                    $("#send_comment").hide();
                });

                $('.check-answer').on('click', function () {
                    debugger;
                    const exerciseID = $(this).data('exercise-id')
                    const exerciseList = @Html.Raw(Json.Serialize(Model.Lecture.Exercises));
                    const exercise = exerciseList.find(e => e.exerciseId === exerciseID);

                    const exerciseType = $(this).data('exercise-type');

                    let isNotCompleteEssay = false;
                    let isNotCompleteMultiChoice = false;


                    let notifyResultEssay = $('#notify-result-essay');
                    let notifyResultMultiple = $('#notify-result-multiple');
                    let trueAnswerNumber = 0;
                    let totalQuestions = 0;



                    isNotCompleteMultiChoice = exercise.questions.some(q =>

                        exerciseType === "multiple" && $(`.answer-multiple-question${q.questionId}:checked`).length === 0
                    );

                    isNotCompleteEssay = exercise.questions.some(q =>

                        exerciseType === "essay" && $(`.answer-essay-question${q.questionId}`).val().trim() === ''
                    );





                    if (exerciseType === "essay") {
                        if (isNotCompleteEssay) {

                            notifyResultEssay.html('Essay exercise still proceeding!');
                        } else {

                            let exercise = {
                                exerciseId: exerciseID,
                                questions: []
                            };

                            $('.essay').each(function () {
                                exercise.questions.push({
                                    questionId: $(this).data('question-id'),
                                    text: $(this).data('question-text'),
                                    correctAnswer: $(this).val()
                                });
                            });

                            $.ajax({
                                type: "POST",
                                url: './Detail?handler=CheckAnswerEssay',
                                contentType: "application/json; charset=utf-8",
                                data: JSON.stringify(exercise),
                                beforeSend: function (xhr) {
                                    xhr.setRequestHeader("XSRF-TOKEN",
                                        $('input:hidden[name="__RequestVerificationToken"]').val());
                                },
                                dataType: "json"
                            }).done(function (data) {
                                console.log(data.result);
                            }).fail(function (xhr, status, error) {
                                console.error("Error:", error);
                                console.log(xhr.responseText);
                            });


                        }
                    } else {
                        if (isNotCompleteMultiChoice) {
                            notifyResultMultiple.html('Multiple choice exercise still proceeding!');
                        } else {
                            $('.multiple-choice:checked').each(function () {
                                totalQuestions++
                                let c = $(this).data('correct');

                                if ($(this).data('correct') === 'True') {
                                    trueAnswerNumber++;
                                    $(`#form_check_answer_${$(this).val()}`).addClass('btn btn-outline-success')


                                } else {
                                    $(`#form_check_answer_${$(this).val()}`).addClass('btn btn-outline-danger')
                                }
                            });
                            let score = trueAnswerNumber * (10 / totalQuestions)
                            notifyResultMultiple.text(`Your score is ${score} out of ${trueAnswerNumber}/${totalQuestions} question`);

                        }
                    }

                    $('#excercises').animate({ scrollTop: 0 }, 'slow');

                });

            })
        </script>


    }



</body>

</html>
